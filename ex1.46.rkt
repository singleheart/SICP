(define (iterative-improve good-guess? improve)
  (lambda (guess)
      (let ((next (improve guess)))
        (if (good-guess? guess next)
            next
            ((iterative-improve good-guess? improve) next)))))
(define (average x y)
  (/ (+ x y) 2))
(define tolerance 0.00001)
(define (sqrt x)
  (define (good-enough? guess x)
    (< (abs (- guess x)) tolerance))
  (define (improve y)
    (average (/ x y) y))
  ((iterative-improve good-enough? improve) 1.0))
(define (fixed-point f first-guess)
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2)) tolerance))  
  ((iterative-improve close-enough? f) first-guess))
(define (sqrt2 x)
  (fixed-point (lambda (y) (average y (/ x y)))
               1.0))