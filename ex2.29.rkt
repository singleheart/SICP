(define (make-mobile left right)
  (list left right))
(define (make-branch length structure)
  (list length structure))
(define (left-branch mobile)
  (car mobile))
(define (right-branch mobile)
  (cadr mobile))
(define (branch-length branch)
  (car branch))
(define (branch-structure branch)
  (cadr branch))
(define (total-weight mobile)
  (define (weight branch)
    (let ((structure (branch-structure branch)))
      (if (pair? structure)
          (total-weight structure)
          structure)))
  (+ (weight (left-branch mobile))
     (weight (right-branch mobile))))
(define (torque branch)
  (let ((length (branch-length branch))
        (structure (branch-structure branch)))
    (if (pair? structure)
        (* length (total-weight structure))
        (* length structure))))
(define (balanced? mobile)
  (define (balanced-branch? branch)
    (let ((structure (branch-structure branch)))
      (if (pair? structure)
          (balanced? structure)
          #t)))    
  (and (= (torque (left-branch mobile))
          (torque (right-branch mobile)))
       (balanced-branch? (left-branch mobile))
       (balanced-branch? (right-branch mobile))))