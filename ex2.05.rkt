(define (square n)
  (* n n))
(define (even? n)
  (= (remainder n 2) 0))
(define (expt b n)
  (define (fast-expt b n)
    (cond ((= n 0) 1)
          ((even? n) (square (fast-expt b (/ n 2))))
          (else (* b (fast-expt b (- n 1))))))
  (define (iter-expt prod base n)
    (cond ((= n 0) prod)
          ((even? n) (iter-expt prod (square base) (/ n 2)))
          (else (iter-expt (* prod base) base (- n 1)))))
  (iter-expt 1 b n))

(define (cons a b)
  (* (expt 2 a) (expt 3 b)))

(define (car z)
  (if (= (remainder z 3) 0)      
      (car (/ z 3))
      (/ (log z) (log 2))))

(define (cdr z)
  (if (= (remainder z 2) 0)      
      (cdr (/ z 2))
      (/ (log z) (log 3))))
