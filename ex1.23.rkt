(define (square n)
  (* n n))
(define (next n)
  (if (= n 2)
      3
      (+ n 2)))
(define (smallest-divisor n)
  (find-divisor n 2))
(define (find-divisor n test-divisor)
  (cond ((> (square test-divisor) n) n)
        ((divides? test-divisor n) test-divisor)
        (else (find-divisor n (next test-divisor)))))
(define (divides? a b)
  (= (remainder b a) 0))
(define (prime? n)
  (= n (smallest-divisor n)))
(define (even? n)
  (= (remainder n 2) 0))
(define (timed-prime-test n)
  (newline)
  (display n)  
  (start-prime-test n (runtime)))
(define (start-prime-test n start-time)
  (if (prime? n)
      (report-prime n (- (runtime) start-time))))
(define (report-prime n elapsed-time)
  (display " *** ")
  (display elapsed-time))
(define (search-for-primes n start)
  (define (search nprime n start-time)
    (define (whenisprime)
      (newline)
      (display n)
      (report-prime n (- (runtime) start-time))
      (search (- nprime 1) (+ n 2) start-time))            
    (if (> nprime 0)
        (if (prime? n)
            (whenisprime)
            (search nprime (+ n 2) start-time))))      
  (if (even? start)
      (search n (+ start 1) (runtime))
      (search n start (runtime))))
