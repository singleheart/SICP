(define (make-set x)
  (list x))

(define (element-of-set? x set)
  (cond ((null? set) false)
       ((= x (car set)) true)
       ((< x (car set)) false)
       (else (element-of-set? x (cdr set)))))

(define (adjoin-set x set)
  (cond ((null? set) (make-set x))
       ((= x (car set)) set)
       ((< x (car set)) (cons x set))
       (else (cons (car set) (adjoin-set x (cdr set))))))

(define (remove-element x set)
  (define (remove x head tail)
    (cond ((null? tail) head)
         ((equal? x (car tail)) (append head (cdr tail)))
         (else (remove x (append head (list (car tail))) (cdr tail)))))
  (remove x '() set))

(define (intersection-set set1 set2)
  (if (or (null? set1) (null? set2))
     '()    
     (let ((x1 (car set1)) (x2 (car set2)))
       (cond ((= x1 x2)
              (cons x1
                   (intersection-set (cdr set1)
                                    (cdr set2))))
            ((< x1 x2)
             (intersection-set (cdr set1) set2))
            ((< x2 x1)
             (intersection-set set1 (cdr set2)))))))

(define (union-set set1 set2)
  (append set1 set2))