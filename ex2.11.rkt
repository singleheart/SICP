(define (make-interval x y)
  (if (< x y)
      (cons x y)
      (cons y x)))
(define (lower-bound x)
  (car x))
(define (upper-bound x)
  (cdr x))
(define (width x)
  (/ (- (upper-bound x) (lower-bound x)) 2))
(define (add-interval x y)
  (make-interval (+ (lower-bound x) (lower-bound y))
                 (+ (upper-bound x) (upper-bound y))))
(define (sub-interval x y)
  (make-interval (- (lower-bound x) (upper-bound y))
                 (- (upper-bound x) (lower-bound y))))
(define (mul-interval x y)
  (let ((lx (lower-bound x))
        (ly (lower-bound y))
        (ux (upper-bound x))
        (uy (upper-bound y))
        (p1 (* (lower-bound x) (lower-bound y)))
        (p2 (* (lower-bound x) (upper-bound y)))
        (p3 (* (upper-bound x) (lower-bound y)))
        (p4 (* (upper-bound x) (upper-bound y))))
    (if (> lx 0)
        (if (> ly 0)
            (make-interval p1 p4)
            (if (> uy 0)
                (make-interval p3 p4)
                (make-interval p3 p2)))
        (if (> ux 0)
            (if (> ly 0)
                (make-interval p2 p4)
                (if (> uy 0)
                    (make-interval (min p2 p3) (max p1 p4))
                    (make-interval p3 p1)))
            (if (> ly 0)
                (make-interval p2 p3)
                (if (> uy 0)
                    (make-interval p2 p1)
                    (make-interval p4 p1)))))))
(define (div-interval x y)
  (mul-interval x
                (if (= (width y) 0)
                    (error "divide by zero" y)
                    (make-interval (/ 1.0 (upper-bound y))
                                   (/ 1.0 (lower-bound y))))))